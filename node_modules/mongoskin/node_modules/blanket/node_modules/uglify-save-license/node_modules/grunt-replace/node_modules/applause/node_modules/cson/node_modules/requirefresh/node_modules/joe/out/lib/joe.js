// Generated by CoffeeScript 1.6.3
(function() {
  var Suite, Task, TaskGroup, Test, isBrowser, isWindows, joe, joePrivate, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  _ref = require('taskgroup'), Task = _ref.Task, TaskGroup = _ref.TaskGroup;

  isBrowser = typeof window !== "undefined" && window !== null;

  isWindows = (typeof process !== "undefined" && process !== null ? (_ref1 = process.platform) != null ? _ref1.indexOf('win') : void 0 : void 0) === 0;

  Test = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      var _base;
      if (this.config == null) {
        this.config = {};
      }
      if ((_base = this.config).name == null) {
        _base.name = false;
      }
      _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(Task);

  Suite = (function(_super) {
    __extends(_Class, _super);

    _Class.prototype.groupRunCallback = function(suite) {
      if (!suite.getConfig().name) {
        return;
      }
      joePrivate.totalSuites++;
      return joe.report('startSuite', suite);
    };

    _Class.prototype.groupCompleteCallback = function(suite, err) {
      if (err) {
        joePrivate.addErrorLog({
          suite: suite,
          err: err
        });
        if (!suite.getConfig().name) {
          return;
        }
        joePrivate.totalFailedSuites++;
      } else {
        if (!suite.getConfig().name) {
          return;
        }
        joePrivate.totalPassedSuites++;
      }
      return joe.report('finishSuite', suite, err);
    };

    _Class.prototype.taskRunCallback = function(test) {
      if (!test.getConfig().name) {
        return;
      }
      joePrivate.totalTests++;
      return joe.report('startTest', test);
    };

    _Class.prototype.taskCompleteCallback = function(test, err) {
      if (err) {
        joePrivate.addErrorLog({
          test: test,
          err: err
        });
        if (!test.getConfig().name) {
          return;
        }
        joePrivate.totalFailedTests++;
      } else {
        if (!test.getConfig().name) {
          return;
        }
        joePrivate.totalPassedTests++;
      }
      return joe.report('finishTest', test, err);
    };

    function _Class() {
      var _base;
      if (this.config == null) {
        this.config = {};
      }
      if ((_base = this.config).name == null) {
        _base.name = false;
      }
      _Class.__super__.constructor.apply(this, arguments);
      this.on('group.run', this.groupRunCallback.bind(this));
      this.on('group.complete', this.groupCompleteCallback.bind(this));
      this.on('group.error', this.groupCompleteCallback.bind(this));
      this.on('task.run', this.taskRunCallback.bind(this));
      this.on('task.complete', this.taskCompleteCallback.bind(this));
      this.on('task.error', this.taskCompleteCallback.bind(this));
    }

    _Class.prototype.createTask = function() {
      var args, task;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      task = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Test, args, function(){});
      return task;
    };

    _Class.prototype.createGroup = function() {
      var args, group;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      group = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Suite, args, function(){});
      return group;
    };

    _Class.prototype.suite = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.addGroup.apply(this, args);
    };

    _Class.prototype.describe = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.addGroup.apply(this, args);
    };

    _Class.prototype.test = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.addTask.apply(this, args);
    };

    _Class.prototype.it = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.addTask.apply(this, args);
    };

    return _Class;

  })(TaskGroup);

  joePrivate = {
    globalSuite: null,
    getGlobalSuite: function() {
      if (joePrivate.globalSuite == null) {
        joePrivate.globalSuite = new Suite().run();
      }
      return joePrivate.globalSuite;
    },
    errorLogs: [],
    addErrorLog: function(errorLog) {
      var _ref2;
      if (errorLog.err === ((_ref2 = joePrivate.errorLogs[joePrivate.errorLogs.length - 1]) != null ? _ref2.err : void 0)) {

      } else {
        joePrivate.errorLogs.push(errorLog);
      }
      return joePrivate;
    },
    exited: false,
    reporters: [],
    totalSuites: 0,
    totalPassedSuites: 0,
    totalFailedSuites: 0,
    totalTests: 0,
    totalPassedTests: 0,
    totalFailedTests: 0,
    getReporters: function() {
      var arg, argResult, err, reporterName, _i, _len, _ref2;
      if (joePrivate.reporters.length === 0) {
        reporterName = 'console';
        _ref2 = (typeof process !== "undefined" && process !== null ? process.argv : void 0) || [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          arg = _ref2[_i];
          argResult = arg.replace(/^--joe-reporter=/, '');
          if (argResult !== arg) {
            reporterName = argResult;
            break;
          }
        }
        try {
          joe.addReporter(reporterName);
        } catch (_error) {
          err = _error;
          console.log("Joe could not load the reporter: " + reporterName + "\nPerhaps it's not installed? Try install it using:\n    npm install --save-dev joe-reporter-" + reporterName + "\nThe exact error was:", err);
          joe.exit(1);
          return;
        }
      }
      return joePrivate.reporters;
    }
  };

  joe = {
    getTotals: function() {
      var errorLogs, result, success, totalErrors, totalFailedSuites, totalFailedTests, totalIncompleteSuites, totalIncompleteTests, totalPassedSuites, totalPassedTests, totalSuites, totalTests;
      totalSuites = joePrivate.totalSuites, totalPassedSuites = joePrivate.totalPassedSuites, totalFailedSuites = joePrivate.totalFailedSuites, totalTests = joePrivate.totalTests, totalPassedTests = joePrivate.totalPassedTests, totalFailedTests = joePrivate.totalFailedTests, errorLogs = joePrivate.errorLogs;
      totalIncompleteSuites = totalSuites - totalPassedSuites - totalFailedSuites;
      totalIncompleteTests = totalTests - totalPassedTests - totalFailedTests;
      totalErrors = errorLogs.length;
      success = (totalIncompleteSuites === 0) && (totalFailedSuites === 0) && (totalIncompleteTests === 0) && (totalFailedTests === 0) && (totalErrors === 0);
      result = {
        totalSuites: totalSuites,
        totalPassedSuites: totalPassedSuites,
        totalFailedSuites: totalFailedSuites,
        totalIncompleteSuites: totalIncompleteSuites,
        totalTests: totalTests,
        totalPassedTests: totalPassedTests,
        totalFailedTests: totalFailedTests,
        totalIncompleteTests: totalIncompleteTests,
        totalErrors: totalErrors,
        success: success
      };
      return result;
    },
    getErrorLogs: function() {
      return joePrivate.errorLogs.slice();
    },
    hasErrors: function() {
      return joe.getTotals().success === false;
    },
    hasExited: function() {
      return joePrivate.exited === true;
    },
    hasReporters: function() {
      return joePrivate.reporters !== 0;
    },
    addReporter: function(reporterInstance) {
      var Reporter;
      if (typeof reporterInstance === 'string') {
        Reporter = require("joe-reporter-" + reporterInstance);
        reporterInstance = new Reporter();
      }
      reporterInstance.joe = joe;
      joePrivate.reporters.push(reporterInstance);
      return joe;
    },
    setReporter: function(reporterInstance) {
      joePrivate.reporters = [];
      if (reporterInstance != null) {
        joe.addReporter(reporterInstance);
      }
      return joe;
    },
    report: function() {
      var args, event, reporter, reporters, _i, _len, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      reporters = joePrivate.getReporters();
      if (!reporters.length) {
        console.log("Joe has no reporters loaded, so cannot log anything...");
        joe.exit(1);
        return joe;
      }
      for (_i = 0, _len = reporters.length; _i < _len; _i++) {
        reporter = reporters[_i];
        if ((_ref2 = reporter[event]) != null) {
          _ref2.apply(reporter, args);
        }
      }
      return joe;
    },
    exit: function(exitCode) {
      if (joe.hasExited()) {
        return;
      }
      joePrivate.exited = true;
      joePrivate.getGlobalSuite().stop();
      if (exitCode == null) {
        exitCode = joe.hasErrors() ? 1 : 0;
      }
      joe.report('exit', exitCode);
      if (typeof process !== "undefined" && process !== null) {
        if (typeof process.exit === "function") {
          process.exit(exitCode);
        }
      }
      return joe;
    },
    uncaughtException: function(err) {
      if (joe.hasExited()) {
        return;
      }
      if (!(err instanceof Error)) {
        err = new Error(err);
      }
      joePrivate.addErrorLog({
        name: 'uncaughtException',
        err: err
      });
      joe.report('uncaughtException', err);
      joe.exit(1);
      return joe;
    },
    getItemNames: function(item) {
      var config, result;
      result = [];
      config = item.getConfig();
      if (config.parent) {
        result = result.concat(this.getItemNames(config.parent));
      }
      if (config.name) {
        result.push(config.name);
      }
      return result;
    },
    getItemName: function(item, separator) {
      var result;
      if (separator) {
        result = joe.getItemNames(item).join(separator);
      } else {
        result = item.getConfig().name;
      }
      return result;
    }
  };

  if (isBrowser) {
    joePrivate.getGlobalSuite().on('item.complete', function(item) {
      if (!item.getConfig().name) {
        return;
      }
      return joePrivate.getGlobalSuite().on('complete', function() {
        return process.nextTick(function() {
          return joe.exit();
        });
      });
    });
  } else if (typeof process !== "undefined" && process !== null) {
    if (!isWindows) {
      process.on('SIGINT', function() {
        return joe.exit();
      });
    }
    process.on('exit', function() {
      return joe.exit();
    });
    process.on('uncaughtException', function(err) {
      return joe.uncaughtException(err);
    });
  }

  joePrivate.getGlobalSuite().on('error', function(err) {
    return joe.uncaughtException(err);
  });

  joe.describe = joe.suite = function() {
    var args, globalSuite;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    globalSuite = joePrivate.getGlobalSuite();
    return globalSuite.suite.apply(globalSuite, args);
  };

  joe.it = joe.test = function() {
    var args, globalSuite;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    globalSuite = joePrivate.getGlobalSuite();
    return globalSuite.test.apply(globalSuite, args);
  };

  if (!isBrowser) {
    if (typeof Object.freeze === "function") {
      Object.freeze(joe);
    }
  }

  module.exports = joe;

}).call(this);

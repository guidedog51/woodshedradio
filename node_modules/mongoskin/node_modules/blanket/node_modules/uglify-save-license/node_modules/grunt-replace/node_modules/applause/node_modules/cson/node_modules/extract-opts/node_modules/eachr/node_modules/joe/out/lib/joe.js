// Generated by CoffeeScript 1.9.0
(function() {
  var EventEmitterGrouped, Suite, Task, TaskGroup, Test, isBrowser, isWindows, joe, joePrivate, key, util, value, _ref, _ref1, _ref2,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  util = require('util');

  EventEmitterGrouped = require('event-emitter-grouped').EventEmitterGrouped;

  _ref = require('taskgroup'), Task = _ref.Task, TaskGroup = _ref.TaskGroup;

  isBrowser = typeof window !== "undefined" && window !== null;

  isWindows = (typeof process !== "undefined" && process !== null ? (_ref1 = process.platform) != null ? _ref1.indexOf('win') : void 0 : void 0) === 0;

  Test = (function(_super) {
    __extends(_Class, _super);

    _Class.create = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    _Class.isTest = function(test) {
      return test instanceof Test;
    };

    function _Class() {
      _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.setConfig = function() {
      var after, before, me;
      _Class.__super__.setConfig.apply(this, arguments);
      me = this;
      if (before = this.config.before) {
        delete this.config.before;
        this.on('before', function(complete) {
          return before.call(this, me, complete);
        });
      }
      if (after = this.config.after) {
        delete this.config.after;
        this.on('after', function(complete) {
          return after.call(this, me, complete);
        });
      }
      return this;
    };

    _Class.prototype.run = function() {
      if (this.hasStarted() === false) {
        this.emitSerial('before', (function(_this) {
          return function(err) {
            if (err) {
              _this.emit('error', err);
            }
            return _Class.__super__.run.apply(_this, arguments);
          };
        })(this));
      } else {
        _Class.__super__.run.apply(this, arguments);
      }
      return this;
    };

    _Class.prototype.complete = function() {
      if (this.isComplete()) {
        this.emitSerial('after', (function(_this) {
          return function(err) {
            if (err) {
              _this.emit('error', err);
            }
            return _Class.__super__.complete.apply(_this, arguments);
          };
        })(this));
      } else {
        _Class.__super__.complete.apply(this, arguments);
      }
      return this;
    };

    return _Class;

  })(Task);

  Suite = (function(_super) {
    __extends(_Class, _super);

    _Class.create = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    _Class.isSuite = function(suite) {
      return suite instanceof Suite;
    };

    function _Class() {
      var me, nestedListener;
      _Class.__super__.constructor.apply(this, arguments);
      me = this;
      this.on('item.add', function(item) {
        if (Test.isTest(item)) {
          item.on('started', function() {
            return me.testRunCallback(item);
          });
          item.done(function(err) {
            return me.testCompleteCallback(item, err);
          });
          item.on('before', function(complete) {
            return me.emitSerial('test.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('test.after', item, complete);
          });
        } else if (Suite.isSuite(item)) {
          item.on('started', function() {
            return me.suiteRunCallback(item);
          });
          item.done(function(err) {
            return me.suiteCompleteCallback(item, err);
          });
          item.on('before', function(complete) {
            return me.emitSerial('suite.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('suite.after', item, complete);
          });
        }
      });
      this.on('item.add', nestedListener = function(item) {
        if (Test.isTest(item)) {
          item.on('before', function(complete) {
            return me.emitSerial('nested.test.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('nested.test.after', item, complete);
          });
        } else if (Suite.isSuite(item)) {
          item.on('item.add', nestedListener);
          item.on('before', function(complete) {
            return me.emitSerial('nested.suite.before', item, complete);
          });
          return item.on('after', function(complete) {
            return me.emitSerial('nested.suite.after', item, complete);
          });
        }
      });
      this;
    }

    _Class.prototype.setConfig = function() {
      var after, before, me;
      _Class.__super__.setConfig.apply(this, arguments);
      me = this;
      if (before = this.config.before) {
        delete this.config.before;
        this.on('before', function(complete) {
          return before.call(this, me, complete);
        });
      }
      if (after = this.config.after) {
        delete this.config.after;
        this.on('after', function(complete) {
          return after.call(this, me, complete);
        });
      }
      return this;
    };

    _Class.prototype.run = function() {
      if (this.hasStarted() === false) {
        this.emitSerial('before', (function(_this) {
          return function(err) {
            if (err) {
              _this.emit('error', err);
            }
            return _Class.__super__.run.apply(_this, arguments);
          };
        })(this));
      } else {
        _Class.__super__.run.apply(this, arguments);
      }
      return this;
    };

    _Class.prototype.complete = function() {
      if (this.isComplete()) {
        this.emitSerial('after', (function(_this) {
          return function(err) {
            if (err) {
              _this.emit('error', err);
            }
            return _Class.__super__.complete.apply(_this, arguments);
          };
        })(this));
      } else {
        _Class.__super__.complete.apply(this, arguments);
      }
      return this;
    };

    _Class.prototype.addMethod = function(method, config) {
      if (config == null) {
        config = {};
      }
      if (config.reporting == null) {
        config.reporting = false;
      }
      if (config.name == null) {
        config.name = false;
      }
      if (config.args == null) {
        config.args = [this.suite.bind(this), this.test.bind(this)];
      }
      return _Class.__super__.addMethod.call(this, method, config);
    };

    _Class.prototype.suiteRunCallback = function(suite) {
      var config;
      config = suite.getConfig();
      if (config.reporting !== false) {
        joePrivate.totalSuites++;
        return joe.report('startSuite', suite);
      }
    };

    _Class.prototype.suiteCompleteCallback = function(suite, err) {
      var config;
      config = suite.getConfig();
      if (err) {
        joePrivate.addErrorLog({
          suite: suite,
          err: err
        });
        if (config.reporting !== false) {
          joePrivate.totalFailedSuites++;
        }
      } else {
        if (config.reporting !== false) {
          joePrivate.totalPassedSuites++;
        }
      }
      if (config.reporting !== false) {
        return joe.report('finishSuite', suite, err);
      }
    };

    _Class.prototype.testRunCallback = function(test) {
      var config;
      config = test.getConfig();
      if (config.reporting !== false) {
        joePrivate.totalTests++;
        return joe.report('startTest', test);
      }
    };

    _Class.prototype.testCompleteCallback = function(test, err) {
      var config;
      config = test.getConfig();
      if (err) {
        joePrivate.addErrorLog({
          test: test,
          err: err
        });
        if (config.reporting !== false) {
          joePrivate.totalFailedTests++;
        }
      } else {
        if (config.reporting !== false) {
          joePrivate.totalPassedTests++;
        }
      }
      if (config.reporting !== false) {
        return joe.report('finishTest', test, err);
      }
    };

    return _Class;

  })(TaskGroup);

  Suite.prototype.suite = Suite.prototype.describe = function() {
    var args, suite;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    suite = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Suite, args, function(){});
    return this.addGroup(suite);
  };

  Suite.prototype.test = Suite.prototype.it = function() {
    var args, test;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    test = (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(Test, args, function(){});
    return this.addTask(test);
  };

  _ref2 = EventEmitterGrouped.prototype;
  for (key in _ref2) {
    value = _ref2[key];
    Test.prototype[key] = Suite.prototype[key] = value;
  }

  joePrivate = {
    globalSuite: null,
    getGlobalSuite: function() {
      if (joePrivate.globalSuite == null) {
        joePrivate.globalSuite = new Suite({
          reporting: false,
          name: false
        }).run();
      }
      return joePrivate.globalSuite;
    },
    errorLogs: [],
    addErrorLog: function(errorLog) {
      var _ref3;
      if (errorLog.err === ((_ref3 = joePrivate.errorLogs[joePrivate.errorLogs.length - 1]) != null ? _ref3.err : void 0)) {

      } else {
        joePrivate.errorLogs.push(errorLog);
      }
      return joePrivate;
    },
    exited: false,
    reporters: [],
    totalSuites: 0,
    totalPassedSuites: 0,
    totalFailedSuites: 0,
    totalTests: 0,
    totalPassedTests: 0,
    totalFailedTests: 0,
    getReporters: function() {
      var arg, argResult, err, reporterName, _i, _len, _ref3;
      if (joePrivate.reporters.length === 0) {
        reporterName = 'console';
        _ref3 = (typeof process !== "undefined" && process !== null ? process.argv : void 0) || [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          arg = _ref3[_i];
          argResult = arg.replace(/^--joe-reporter=/, '');
          if (argResult !== arg) {
            reporterName = argResult;
            break;
          }
        }
        try {
          joe.addReporter(reporterName);
        } catch (_error) {
          err = _error;
          console.error("Joe could not load the reporter: " + reporterName + "\nPerhaps it's not installed? Try install it using:\n    npm install --save-dev joe-reporter-" + reporterName + "\nThe exact error was:");
          console.error(err.stack || err.message);
          joe.exit(1);
          return;
        }
      }
      return joePrivate.reporters;
    }
  };

  joe = {
    getTotals: function() {
      var errorLogs, result, success, totalErrors, totalFailedSuites, totalFailedTests, totalIncompleteSuites, totalIncompleteTests, totalPassedSuites, totalPassedTests, totalSuites, totalTests;
      totalSuites = joePrivate.totalSuites, totalPassedSuites = joePrivate.totalPassedSuites, totalFailedSuites = joePrivate.totalFailedSuites, totalTests = joePrivate.totalTests, totalPassedTests = joePrivate.totalPassedTests, totalFailedTests = joePrivate.totalFailedTests, errorLogs = joePrivate.errorLogs;
      totalIncompleteSuites = totalSuites - totalPassedSuites - totalFailedSuites;
      totalIncompleteTests = totalTests - totalPassedTests - totalFailedTests;
      totalErrors = errorLogs.length;
      success = (totalIncompleteSuites === 0) && (totalFailedSuites === 0) && (totalIncompleteTests === 0) && (totalFailedTests === 0) && (totalErrors === 0);
      result = {
        totalSuites: totalSuites,
        totalPassedSuites: totalPassedSuites,
        totalFailedSuites: totalFailedSuites,
        totalIncompleteSuites: totalIncompleteSuites,
        totalTests: totalTests,
        totalPassedTests: totalPassedTests,
        totalFailedTests: totalFailedTests,
        totalIncompleteTests: totalIncompleteTests,
        totalErrors: totalErrors,
        success: success
      };
      return result;
    },
    getErrorLogs: function() {
      return joePrivate.errorLogs.slice();
    },
    hasErrors: function() {
      return joe.getTotals().success === false;
    },
    hasExited: function() {
      return joePrivate.exited === true;
    },
    hasReporters: function() {
      return joePrivate.reporters !== 0;
    },
    addReporter: function(reporterInstance) {
      var Reporter;
      if (typeof reporterInstance === 'string') {
        Reporter = require("joe-reporter-" + reporterInstance);
        reporterInstance = new Reporter();
      }
      reporterInstance.joe = joe;
      joePrivate.reporters.push(reporterInstance);
      return joe;
    },
    setReporter: function(reporterInstance) {
      joePrivate.reporters = [];
      if (reporterInstance != null) {
        joe.addReporter(reporterInstance);
      }
      return joe;
    },
    report: function() {
      var args, event, reporter, reporters, _i, _len, _ref3;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      reporters = joePrivate.getReporters();
      if (!reporters.length) {
        console.error("Joe has no reporters loaded, so cannot log anything...");
        joe.exit(1);
        return joe;
      }
      for (_i = 0, _len = reporters.length; _i < _len; _i++) {
        reporter = reporters[_i];
        if ((_ref3 = reporter[event]) != null) {
          _ref3.apply(reporter, args);
        }
      }
      return joe;
    },
    exit: function(exitCode) {
      if (joe.hasExited()) {
        return;
      }
      joePrivate.exited = true;
      if (exitCode == null) {
        exitCode = joe.hasErrors() ? 1 : 0;
      }
      joePrivate.getGlobalSuite().destroy();
      joe.report('exit', exitCode);
      if (typeof process !== "undefined" && process !== null) {
        if (typeof process.exit === "function") {
          process.exit(exitCode);
        }
      }
      return joe;
    },
    uncaughtException: function(err) {
      if (joe.hasExited()) {
        return;
      }
      if (!util.isError(err)) {
        err = new Error(err);
      }
      joePrivate.addErrorLog({
        name: 'uncaughtException',
        err: err
      });
      joe.report('uncaughtException', err);
      joe.exit(1);
      return joe;
    },
    getItemName: function(item, separator) {
      var result;
      if (separator) {
        result = item.getNames({
          separator: separator
        });
      } else {
        result = item.getConfig().name;
      }
      return result;
    }
  };

  if (typeof process !== "undefined" && process !== null) {
    if (!isWindows) {
      process.on('SIGINT', function() {
        return joe.exit();
      });
    }
    process.on('exit', function() {
      return joe.exit();
    });
    process.on('uncaughtException', function(err) {
      return joe.uncaughtException(err);
    });
  }

  joePrivate.getGlobalSuite().done(function(err) {
    if (err) {
      return joe.uncaughtException(err);
    }
  });

  joe.describe = joe.suite = function() {
    var args, globalSuite;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    globalSuite = joePrivate.getGlobalSuite();
    return globalSuite.suite.apply(globalSuite, args);
  };

  joe.it = joe.test = function() {
    var args, globalSuite;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    globalSuite = joePrivate.getGlobalSuite();
    return globalSuite.test.apply(globalSuite, args);
  };

  if (!isBrowser) {
    if (typeof Object.freeze === "function") {
      Object.freeze(joe);
    }
  }

  module.exports = joe;

}).call(this);
